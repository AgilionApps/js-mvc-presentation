# Javascript MVC

Modular and decoupled code is all the rage for server side frameworks like Ruby on Rails (Ruby), 
Django (Python) and Zend Framework (PHP). Great care and attention is paid for this upfront, ensuring application code is well organized and optimized for maintainability.

Client side development has so far been a different story. Traditionally, Javascript has been treated as an afterthought. Code and libraries are copy/pasted and dropped into a public directory with little regard. 

Popular Javascript libraries like jQuery, Prototype and Mootools enable developers to create powerful user experiences with fewer lines of code. But they do not inherently promote principles of maintainability. These frameworks can even make the problem worse and it is all too common to find "spaghetti" callbacks and selectors nested in massive Javascript files. 

But the principle holds true that the best way to build large applications is to NOT build large applications. The more modular and decoupled code becomes the easier it is to extend and reuse. The principles applied in structuring server side frameworks are being applied to front end development frameworks as demand for rich user experiences continues to increase.

And there are a lot of Javascript MVCs to chose from.

There are comprehensive frameworks like Cappuccino and Sproutcore, that provide complete UI widgets and themes. And there are minimalist frameworks like Backbone and Spine, that strive for simplicity over all else.

I'll be talking about Spine.js.

### A Note About CoffeeScript

CoffeeScript has a lot of proponents and many opponents. Everything written in CoffeeScript can be written in JavaScript and every library used is available in both formats if desired. 

The advantages of using CoffeeScript are 

- You only look at your problem, not any surrounding "cruft" like opening and closing brackets
- There are some nice shortcuts like "@" which is shorthand for "this" reference
- nicer control structures like "unless"
- a cleaner and clearer object oriented approach to Javascript


# Why Spine?

- It's written by seasoned Javascript developer and O'Reilly author, Alex MacCaw
- It follows the Model, View, Controller Design Pattern 
- It's lightweight, comes in around 2K compressed
- It has incredible documentation and many example apps
- Interoperable with other common libraries such as jQuery and Zepto
- It has code generators, a dependency management system (NPM)
- It is just Javascript (so you can skip the code generation and dependency management if needed)
- Is written in CoffeeScript :)
- Very simple but incredibly powerful


# Model, View, Controller

The Model, View, Controller Design Pattern (MCV) is responsible for separation of concerns.

## The Model
- Application Data
- Business Logic

### Fetching Data
### Local Storage
### AJAX Communication
### Validation
### Persistence

## The View
- Presentation Layer
- Logic free (aside from very simple control structures)
- Uses a template library (Mustache, jQuery.tmpl, Ecoâ€¦) for outputting data to the user

### Templates
### Helpers

## The Controller
- The application "glue" between models and views
- Fetches data from the server (or localStorage)
- Handles events and calling and rendering associated models

### Elements 
### Events
### Rendering

## Stacks and Routing
## Testing Frameworks

## Miscellaneous
### Working with Forms (.fromForm vs. toJSON)
### HTML5
### Hem
### Spine Mobile


# How to Build Web Applications with Spine

### Dependencies
### Where to Find Information

### Weight Tracker: An Example Spine.js Application

Web developers tend to lead sedentary lifestyles. To correct this I've built a simple little app that lets you input your target weight and record progress toward that goal. 

It uses localStorage and runs 100% in the browser.

## Conclusion

Regardless of what framework you ultimately decide on, the principles and design patterns are similar enough, that changing between them is more easy than it is difficult. It is a step in the right direction and brings true programming back into client side development.


